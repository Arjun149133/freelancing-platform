generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("NEXT_PUBLIC_DATABASE_URL")
  directUrl = env("NEXT_PUBLIC_DIRECT_URL")
}

model User {
  id                  String     @id @default(uuid())
  first_name          String
  last_name           String
  email               String     @unique
  password            String?
  role                Role       @default(FREELANCER)
  createdAt           DateTime?  @default(now())
  updatedAt           DateTime?  @updatedAt
  projects            Project[] //projects user working on
  profile             Profile?
  proposals           Proposal[]
  previousWork        Work[] //previous work on the platform
  reviewsGiven        Review[]   @relation("ClientReviews")
  reviewsReceived     Review[]   @relation("FreelancerReviews")
  clientContracts     Contract[] @relation("ClientContracts")
  freelancerContracts Contract[] @relation("FreelancerContracts")
  payments            Payment[]
  user1Chats          Chat[]     @relation("UserChatsUser1")
  user2Chats          Chat[]     @relation("UserChatsUser2")
  sentMessages        Message[]  @relation("SentMessages")
}

model Chat {
  id        String    @id @default(uuid())
  user1Id   String
  user2Id   String
  messages  Message[] @relation("ChatMessages")
  createdAt DateTime  @default(now())
  user1     User      @relation("UserChatsUser1", fields: [user1Id], references: [id])
  user2     User      @relation("UserChatsUser2", fields: [user2Id], references: [id])
}

model Message {
  id       String   @id @default(uuid())
  chatId   String
  senderId String
  content  String
  sentAt   DateTime @default(now())
  isRead   Boolean  @default(false)
  chat     Chat     @relation("ChatMessages", fields: [chatId], references: [id])
  sender   User     @relation("SentMessages", fields: [senderId], references: [id])
}

model Profile {
  id                String        @id @default(uuid())
  userId            String        @unique
  bio               String?
  profilePictureUrl String?
  skills            Skill[]       @relation("ProfileSkills")
  experience        Experience[]  @relation("ProfileExperience") // real world experience
  education         Education[]   @relation("ProfileEducation")
  certificates      Certificate[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Education {
  id           String    @id @default(uuid())
  profileId    String
  schoolName   String
  degree       String
  fieldOfStudy String
  startDate    DateTime
  endDate      DateTime?
  profile      Profile   @relation("ProfileEducation", fields: [profileId], references: [id])
}

model Certificate {
  id         String    @id @default(uuid())
  profileId  String
  name       String
  issuingOrg String
  issueDate  DateTime
  expiryDate DateTime?
  profile    Profile   @relation(fields: [profileId], references: [id])
}

model Payment {
  id            String        @id @default(uuid())
  contractId    String // Reference to the contract related to the payment
  userId        String // Reference to the user (client or freelancer)
  amount        Float // Amount being paid
  status        PaymentStatus @default(PENDING) // Status of the payment
  paymentMethod PaymentMethod @default(RAZORPAY)
  razorpayId    String? // Reference to Razorpay payment (optional)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  contract      Contract      @relation(fields: [contractId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
  razorpay      Razorpay?     @relation(fields: [razorpayId], references: [id]) // Razorpay relation
}

model Razorpay {
  id        String    @id @default(uuid())
  orderId   String
  paymentId String    @unique
  signature String
  createdAt DateTime  @default(now())
  payment   Payment[]
}

model Contract {
  id           String         @id @default(uuid())
  projectId    String
  clientId     String
  freelancerId String
  terms        String?
  amount       Float
  status       ContractStatus @default(PENDING)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  startDate    DateTime?
  endDate      DateTime?
  job          Project        @relation(fields: [projectId], references: [id])
  client       User           @relation("ClientContracts", fields: [clientId], references: [id])
  freelancer   User           @relation("FreelancerContracts", fields: [freelancerId], references: [id])
  payments     Payment[]
  work         Work[]
}

model Experience {
  id          String    @id @default(uuid())
  companyName String // Name of the company or organization
  role        String // Job title or role of the user
  startDate   DateTime // When the user started this job
  endDate     DateTime? // When the user ended this job (nullable for current positions)
  description String? // Optional description of responsibilities and achievements
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  profile     Profile   @relation("ProfileExperience", fields: [profileId], references: [id])
  profileId   String
}

model Work {
  id               String   @id @default(uuid())
  userId           String
  projectTitle     String
  clientName       String
  projectStartDate DateTime
  projectEndDate   DateTime
  earnings         Float
  rating           Float?
  description      String?
  user             User     @relation(fields: [userId], references: [id])
  contract         Contract @relation(fields: [contractId], references: [id])
  contractId       String
}

model Project {
  id          String     @id @default(uuid())
  title       String
  description String
  budget      Float
  clientId    String
  freelancers User[]
  proposals   Proposal[]
  reviews     Review[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  jobCategory Category //jobcategory
  contracts   Contract[]
}

model Proposal {
  id           String         @id @default(uuid())
  projectId    String
  freelancerId String
  coverLetter  String
  deliveryDate DateTime
  price        Float
  createdAt    DateTime       @default(now())
  status       ProposalStatus @default(PENDING)
  user         User           @relation(fields: [freelancerId], references: [id])
  project      Project        @relation(fields: [projectId], references: [id])
}

model Review {
  id               String   @id @default(uuid())
  projectId        String
  reviewGiverId    String
  reviewReceiverId String
  rating           Float
  feedback         String
  createdAt        DateTime @default(now())
  project          Project  @relation(fields: [projectId], references: [id])
  reviewGiver      User     @relation("ClientReviews", fields: [reviewGiverId], references: [id])
  reviewReceiver   User     @relation("FreelancerReviews", fields: [reviewReceiverId], references: [id])
}

model Escrow {
  id        String       @id @default(uuid())
  jobId     Int          @unique
  amount    Float
  status    EscrowStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Skill {
  id       String    @id @default(uuid())
  name     String
  profiles Profile[] @relation("ProfileSkills")
}

enum Role {
  CLIENT
  FREELANCER
}

enum Category {
  WEB_DEVELOPMENT
  MOBILE_DEVELOPMENT
  GRAPHIC_DESIGN
  DIGITAL_MARKETING
  WRITING
  VIDEO_EDITING
  OTHER
}

enum ContractStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELED
}

enum ProjectStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum ProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum EscrowStatus {
  PENDING
  FUNDED
  RELEASED
  DISPUTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  RAZORPAY
  BANK_TRANSFER
  OTHER
}
